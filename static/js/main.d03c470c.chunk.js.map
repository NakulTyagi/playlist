{"version":3,"sources":["youtube.js","serviceWorker.js","index.js"],"names":["Youtube","state","arr","count","videoId","playlist","input","document","getElementById","value","console","log","list","x","createElement","innerHTML","appendChild","y","id","onclick","play","type","delete","i","length","setState","slice","substring","Input","Search","className","placeholder","onClick","YouTube","this","opts","height","width","playerVars","autoplay","onReady","_onReady","onEnd","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAiGeA,G,kNAzFXC,MAAQ,CAAEC,IAAK,CAAC,+CAAgDC,MAAO,EAAGC,QAAS,e,EAInFC,SAAW,WACP,IAAIC,EAAQC,SAASC,eAAe,MAAMC,MAC1CC,QAAQC,IAAI,EAAKV,MAAMC,IAAM,EAAKD,MAAME,OAExC,EAAKF,MAAMC,IAAI,EAAKD,MAAME,OAASG,EAEnC,IAAIM,EAAO,EAAKX,MAAMC,IAAI,EAAKD,MAAME,OACjCU,EAAIN,SAASO,cAAc,MAC/BD,EAAEE,UAAYH,EACdL,SAASC,eAAe,OAAOQ,YAAYH,GAC3C,IAAII,EAAIV,SAASO,cAAc,UAC/BG,EAAEF,UAAY,OACdE,EAAEC,GAAK,OACPD,EAAEE,QAAU,kBAAM,EAAKC,KAAKd,IAC5BW,EAAEI,KAAO,UACTd,SAASC,eAAe,OAAOQ,YAAYC,GAC3C,EAAKhB,MAAME,MAAQ,EAAKF,MAAME,MAAQ,G,EAG1CmB,OAAS,WACL,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKtB,MAAMC,IAAIsB,OAAS,EAAGD,IAC3C,EAAKtB,MAAMC,IAAIqB,GAAK,EAAKtB,MAAMC,IAAIqB,EAAI,GAE3C,EAAKE,SAAS,CAAErB,QAAS,EAAKH,MAAMC,IAAI,GAAGwB,OAAO,MAElDhB,QAAQC,IAAI,gBAAkB,EAAKV,MAAMG,U,EAI7CgB,KAAO,SAACd,GAEJ,IAAK,IAAIiB,EAAI,EAAGA,EAAIjB,EAAMkB,OAAQD,IACd,KAAZjB,EAAMiB,KACN,EAAKtB,MAAMG,QAAUE,EAAMqB,UAAUJ,EAAI,EAAGjB,EAAMkB,QAClDd,QAAQC,IAAI,EAAKV,MAAMG,UAG/B,EAAKqB,SAAS,CAAErB,QAASE,EAAMoB,OAAO,O,wEAOhC,IAAD,OACUE,IAAMC,OAQrB,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,UACX,wCACA,6BACI,kBAAC,IAAD,CAAOZ,GAAG,KAAKa,YAAY,kBAC3B,kBAAC,IAAD,CAAQb,GAAG,MAAMG,KAAK,UAAUW,QAAS,kBAAM,EAAK3B,aAApD,QAGJ,6BACI,wBAAIa,GAAG,SAMX,yBAAKA,GAAG,SACJ,kBAACe,EAAA,EAAD,CAASf,GAAG,MACRd,QAAS8B,KAAKjC,MAAMG,QACpB+B,KA1BP,CACTC,OAAQ,MACRC,MAAO,MACPC,WAAY,CACRC,SAAU,IAuBEC,SAASN,KAAKO,SAAU,kBAAM,EAAKrB,KAAK,EAAKnB,MAAMC,IAAI,MACvDwC,MAAO,kBAAM,EAAKpB,mB,GA/ExBqB,cCKFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAa3C,SAASC,eAAe,SD6H/C,kBAAmB2C,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d03c470c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { Input } from \"antd\";\r\nimport YouTube from 'react-youtube';\r\nimport './youtube.css';\r\n\r\n\r\nclass Youtube extends Component {\r\n    state = { arr: [\"https://www.youtube.com/watch?v=IKuoOTRO1eo\"], count: 0, videoId: \"IKuoOTRO1eo\" };\r\n\r\n\r\n\r\n    playlist = () => {\r\n        var input = document.getElementById(\"ip\").value;\r\n        console.log(this.state.arr + this.state.count);\r\n\r\n        this.state.arr[this.state.count] = input;\r\n\r\n        var list = this.state.arr[this.state.count];\r\n        var x = document.createElement('li');\r\n        x.innerHTML = list\r\n        document.getElementById('box').appendChild(x);\r\n        var y = document.createElement('button');\r\n        y.innerHTML = \"Play\";\r\n        y.id = \"play\";\r\n        y.onclick = () => this.play(input);\r\n        y.type = \"primary\";\r\n        document.getElementById('box').appendChild(y);\r\n        this.state.count = this.state.count + 1;\r\n    };\r\n\r\n    delete = () => {\r\n        for (var i = 0; i < this.state.arr.length - 1; i++) {\r\n            this.state.arr[i] = this.state.arr[i + 1];\r\n        }\r\n        this.setState({ videoId: this.state.arr[0].slice(-11) })\r\n\r\n        console.log(\"delete called\" + this.state.videoId);\r\n    };\r\n\r\n\r\n    play = (input) => {\r\n\r\n        for (var i = 0; i < input.length; i++) {\r\n            if (input[i] == \"=\") {\r\n                this.state.videoId = input.substring(i + 1, input.length)\r\n                console.log(this.state.videoId);\r\n            }\r\n        }\r\n        this.setState({ videoId: input.slice(-11) })\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n    render() {\r\n        const Search = Input.Search;\r\n        const opts = {\r\n            height: '390',\r\n            width: '640',\r\n            playerVars: { // https://developers.google.com/youtube/player_parameters\r\n                autoplay: 1\r\n            }\r\n        };\r\n        return (\r\n            <div className=\"contain\">\r\n                <div className=\"header\">\r\n                    <h1>PLAYLIST</h1>\r\n                    <div>\r\n                        <Input id=\"ip\" placeholder=\"Input the URL\" />\r\n                        <Button id=\"add\" type=\"primary\" onClick={() => this.playlist()}>Add</Button>\r\n\r\n                    </div>\r\n                    <div >\r\n                        <ol id=\"box\">\r\n\r\n                        </ol>\r\n\r\n                    </div>\r\n\r\n                    <div id=\"video\">\r\n                        <YouTube id=\"you\"\r\n                            videoId={this.state.videoId}\r\n                            opts={opts}\r\n                            onReady={this._onReady, () => this.play(this.state.arr[0])}\r\n                            onEnd={() => this.delete()}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Youtube;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Youtube from './youtube';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Youtube />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}